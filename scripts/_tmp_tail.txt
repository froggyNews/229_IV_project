def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="Generate plots for Slides 10â€“13 (1h/1m-aware)")
    p.add_argument(
        "--tickers",
        nargs="+",
        default=["QBTS", "IONQ", "RGTI", "QUBT"],
        help="Tickers to include",
    )
    p.add_argument("--start", default="2025-06-02")
    p.add_argument("--end", default="2025-08-06")
    p.add_argument("--db", default=None, help="Path to SQLite DB (overrides IV_DB_PATH)")
    p.add_argument("--timeframe", choices=["1h", "1m"], default="1m", help="Data timeframe to set sensible defaults")
    p.add_argument("--plots-dir", default="plots")
    p.add_argument("--skip-regression", action="store_true", help="Skip baseline regression outputs")
    p.add_argument("--skip-pca", action="store_true", help="Skip baseline PCA outputs")
    p.add_argument(
        "--rolling-target",
        default=None,
        help="Ticker for rolling correlation line plot (omit to skip)",
    )
    p.add_argument(
        "--rolling-window",
        type=int,
        default=None,
        help="Rolling window size in bars (auto: 390 for 1h, 23400 for 1m)",
    )
    p.add_argument("--skip-pooled", action="store_true", help="Skip pooled XGB analysis")
    p.add_argument("--forward-steps", type=int, default=15)
    p.add_argument("--tolerance", default="2s")
    p.add_argument("--test-frac", type=float, default=0.2)
    p.add_argument("--save-csv", action="store_true", help="Also save CSVs of outputs")
    p.add_argument("--eval-files", nargs="*", help="Evaluation JSON file(s) to export tables from")
    p.add_argument("--eval-dir", default="outputs/evaluations", help="Directory to scan for *_evaluation.json")
    return p.parse_args()


if __name__ == "__main__":
    run(parse_args())

